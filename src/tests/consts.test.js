import Consts from '../consts'

const THIRTYONE = 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'
const THIRTYONEEMAIL = 'aaa@aaaaaaaaaaaaaaaaaaaaaaaaa.aaaa'
const FIFTYWEBSITE = 'www.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaa'
const HUNDRED = 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'

describe('Consts', () => {
  it ('Tests customerFields', () => {
    let response = Consts.customerFields
    expect(response).toHaveLength(17)
    expect(typeof response[0].validation('',true)).toBe('string')
    expect(typeof response[0].validation(THIRTYONE,true)).toBe('string')
    expect(response[0].validation('a',true)).toBeNull()
    expect(typeof response[1].validation('',true)).toBe('string')
    expect(typeof response[1].validation('a',true)).toBe('string')
    expect(typeof response[1].validation(THIRTYONEEMAIL,true)).toBe('string')
    expect(response[1].validation('ca@ca.ca',true)).toBeNull()
    expect(typeof response[2].validation('',true)).toBe('string')
    expect(typeof response[2].validation('y',true)).toBe('string')
    expect(response[2].validation('777777777777',true)).toBeNull()
    expect(typeof response[3].validation('',true)).toBe('string')
    expect(typeof response[3].validation('y',true)).toBe('string')
    expect(typeof response[3].validation(FIFTYWEBSITE,true)).toBe('string')
    expect(response[3].validation('www.a.com',true)).toBeNull()
    expect(typeof response[4].validation('',true)).toBe('string')
    expect(response[4].validation('w',true)).toBeNull()
    expect(response[4].onUpdate('United States of America')).toHaveLength(2)
    expect(typeof response[5].validation('',true)).toBe('string')
    expect(typeof response[5].validation(THIRTYONE,true)).toBe('string')
    expect(response[5].validation('a',true)).toBeNull()
    expect(typeof response[6].validation('',true)).toBe('string')
    expect(typeof response[6].validation(THIRTYONE,true)).toBe('string')
    expect(response[6].validation('a',true)).toBeNull()
    expect(typeof response[7].validation('',true)).toBe('string')
    expect(typeof response[7].validation(THIRTYONE,true)).toBe('string')
    expect(response[7].validation('a',true)).toBeNull()
    expect(typeof response[8].validation('',true)).toBe('string')
    expect(response[8].validation('w',true)).toBeNull()
    expect(typeof response[9].validation('',true)).toBe('string')
    expect(typeof response[9].validation(THIRTYONE,true)).toBe('string')
    expect(response[9].validation('w',true)).toBeNull()
    expect(response[10].onUpdate(true)).toHaveLength(6)
    expect(response[10].onUpdate(false, [
      {id: 'billCountry', value: 'United States of America'}
    ])).toHaveLength(6)
    expect(response[10].onUpdate(false, [{id: 'billCountry', value: 'Other'}])).toHaveLength(6)
    expect(typeof response[11].validation('',true)).toBe('string')
    expect(response[11].validation('w',true)).toBeNull()
    expect(response[11].onUpdate('United States of America')).toHaveLength(5)
    expect(typeof response[12].validation('',true)).toBe('string')
    expect(typeof response[12].validation(THIRTYONE,true)).toBe('string')
    expect(response[12].validation('a',true)).toBeNull()
    expect(typeof response[13].validation('',true)).toBe('string')
    expect(typeof response[13].validation(THIRTYONE,true)).toBe('string')
    expect(response[13].validation('a',true)).toBeNull()
    expect(typeof response[14].validation('',true)).toBe('string')
    expect(typeof response[14].validation(THIRTYONE,true)).toBe('string')
    expect(response[14].validation('a',true)).toBeNull()
    expect(typeof response[15].validation('',true)).toBe('string')
    expect(response[15].validation('w',true)).toBeNull()
    expect(typeof response[16].validation('',true)).toBe('string')
    expect(typeof response[16].validation(THIRTYONE,true)).toBe('string')
    expect(response[16].validation('w',true)).toBeNull()
  })
  it ('Tests projectFields', () => {
    let response = Consts.projectFields
    expect(response).toHaveLength(7)
    expect(typeof response[0].validation('',true)).toBe('string')
    expect(response[0].validation('w',true)).toBeNull()
    expect(response[0].onUpdate('APC')).toHaveLength(6)
    expect(response[0].onUpdate('Decorative')).toHaveLength(6)
    expect(response[0].onUpdate('Maintenance')).toHaveLength(6)
    expect(response[0].onUpdate('Administration')).toHaveLength(6)
    expect(response[0].onUpdate('Research and Development')).toHaveLength(6)
    expect(response[0].onUpdate('Military')).toHaveLength(6)
    expect(response[0].onUpdate('Production')).toHaveLength(6)
    expect(response[0].onUpdate('Other')).toHaveLength(6)
    expect(response[0].onUpdate('A')).toHaveLength(6)
    expect(typeof response[1].validation('',true)).toBe('string')
    expect(response[1].validation('w',true)).toBeNull()
    expect(response[1].onUpdate('Pump')).toHaveLength(1)
    expect(response[1].onUpdate('A')).toHaveLength(1)
    expect(typeof response[2].validation('',true)).toBe('string')
    expect(typeof response[2].validation('a',true)).toBe('string')
    expect(typeof response[2].validation('55555',true)).toBe('string')
    expect(response[2].validation('4',true)).toBeNull()
    expect(typeof response[3].validation('',true)).toBe('string')
    expect(typeof response[3].validation(THIRTYONE,true)).toBe('string')
    expect(response[3].validation('a',true)).toBeNull()
    expect(typeof response[4].validation('',true)).toBe('string')
    expect(response[4].validation('a',true)).toBeNull()
    expect(typeof response[5].validation('',true)).toBe('string')
    expect(typeof response[5].validation(HUNDRED,true)).toBe('string')
    expect(response[5].validation('a',true)).toBeNull()
    expect(typeof response[6].validation('',true)).toBe('string')
    expect(typeof response[6].validation(THIRTYONE,true)).toBe('string')
    expect(response[6].validation('a',true)).toBeNull()
  })
  it ('Tests employeeFields', () => {
    let response = Consts.employeeFields
    expect(response).toHaveLength(2)
    expect(typeof response[0].validation('',true)).toBe('string')
    expect(typeof response[0].validation(THIRTYONE,true)).toBe('string')
    expect(response[0].validation('4',true)).toBeNull()
    expect(typeof response[1].validation('',true)).toBe('string')
    expect(typeof response[1].validation(THIRTYONE,true)).toBe('string')
    expect(response[1].validation('4',true)).toBeNull()
  })
  it ('Tests accountFields', () => {
    let response = Consts.accountFields
    expect(response).toHaveLength(3)
    expect(typeof response[0].validation('',true)).toBe('string')
    expect(typeof response[0].validation(THIRTYONE,true)).toBe('string')
    expect(response[0].validation('4',true)).toBeNull()
    expect(typeof response[1].validation('',true)).toBe('string')
    expect(typeof response[1].validation(THIRTYONE,true)).toBe('string')
    expect(response[1].validation('4',true)).toBeNull()
  })
  it ('Tests taskFields', () => {
    let response = Consts.taskFields
    expect(response).toHaveLength(2)
    expect(typeof response[0].validation('',true)).toBe('string')
    expect(typeof response[0].validation(THIRTYONE,true)).toBe('string')
    expect(response[0].validation('4',true)).toBeNull()
    expect(typeof response[1].validation('',true)).toBe('string')
    expect(response[1].validation('4',true)).toBeNull()
  })
})
