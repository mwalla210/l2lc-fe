{
  "_args": [
    [
      {
        "raw": "chai-enzyme@^0.6.1",
        "scope": null,
        "escapedName": "chai-enzyme",
        "name": "chai-enzyme",
        "rawSpec": "^0.6.1",
        "spec": ">=0.6.1 <0.7.0",
        "type": "range"
      },
      "/GitSourcetree/l2lc-fe/app"
    ]
  ],
  "_from": "chai-enzyme@>=0.6.1 <0.7.0",
  "_id": "chai-enzyme@0.6.1",
  "_inCache": true,
  "_location": "/chai-enzyme",
  "_nodeVersion": "6.6.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/chai-enzyme-0.6.1.tgz_1479471907478_0.016630580415949225"
  },
  "_npmUser": {
    "name": "ayrton",
    "email": "im@ayrton.be"
  },
  "_npmVersion": "3.10.3",
  "_phantomChildren": {},
  "_requested": {
    "raw": "chai-enzyme@^0.6.1",
    "scope": null,
    "escapedName": "chai-enzyme",
    "name": "chai-enzyme",
    "rawSpec": "^0.6.1",
    "spec": ">=0.6.1 <0.7.0",
    "type": "range"
  },
  "_requiredBy": [
    "#DEV:/"
  ],
  "_resolved": "https://registry.npmjs.org/chai-enzyme/-/chai-enzyme-0.6.1.tgz",
  "_shasum": "585c963c6ea1331446efd12ee8391e807d758620",
  "_shrinkwrap": null,
  "_spec": "chai-enzyme@^0.6.1",
  "_where": "/GitSourcetree/l2lc-fe/app",
  "author": {
    "name": "Veselin Todorov",
    "email": "hi@vesln.com",
    "url": "https://github.com/vesln"
  },
  "bugs": {
    "url": "https://github.com/producthunt/chai-enzyme/issues"
  },
  "dependencies": {
    "html": "^1.0.0",
    "react-element-to-jsx-string": "^5.0.0"
  },
  "description": "Chai.js assertions for enzyme",
  "devDependencies": {
    "babel-cli": "^6.5.1",
    "babel-eslint": "^7.1.0",
    "babel-preset-es2015": "^6.5.0",
    "babel-preset-react": "^6.5.0",
    "babel-register": "^6.5.2",
    "chai": "^3.5.0",
    "enzyme": "^2.0.0",
    "jsdom": "^9.1.0",
    "mocha": "^3.0.0",
    "react": "^0.14.0 || ^15.0.0-0",
    "react-addons-test-utils": "^0.14.0 || ^15.0.0-0",
    "react-dom": "^0.14.0 || ^15.0.0-0",
    "rimraf": "^2.5.0",
    "snazzy": "^5.0.0",
    "standard": "^8.1.0"
  },
  "directories": {},
  "dist": {
    "shasum": "585c963c6ea1331446efd12ee8391e807d758620",
    "tarball": "https://registry.npmjs.org/chai-enzyme/-/chai-enzyme-0.6.1.tgz"
  },
  "gitHead": "a590824fc0dbc211f182687936799b0745c6422f",
  "homepage": "https://github.com/producthunt/chai-enzyme",
  "keywords": [
    "javascript",
    "shallow rendering",
    "shallowRender",
    "test",
    "reactjs",
    "react",
    "flux",
    "testing",
    "test utils",
    "assertion helpers",
    "tdd",
    "mocha",
    "chai",
    "chaijs",
    "enzyme"
  ],
  "license": "MIT",
  "main": "build/index.js",
  "maintainers": [
    {
      "name": "ayrton",
      "email": "ayrton.decraene@gmail.com"
    },
    {
      "name": "vesln",
      "email": "hi@vesln.com"
    }
  ],
  "name": "chai-enzyme",
  "optionalDependencies": {},
  "peerDependencies": {
    "chai": "3.x",
    "cheerio": "0.19.x || 0.20.x || 0.22.x",
    "enzyme": "1.x || 2.x",
    "react": "^0.14.0 || ^15.0.0-0",
    "react-addons-test-utils": "^0.14.0 || ^15.0.0-0",
    "react-dom": "^0.14.0 || ^15.0.0-0"
  },
  "readme": "# chai-enzyme\n\n[![npm version](https://img.shields.io/npm/v/chai-enzyme.svg)](https://www.npmjs.com/package/chai-enzyme) [![License](https://img.shields.io/npm/l/chai-enzyme.svg)](https://www.npmjs.com/package/chai-enzyme) [![Build Status](https://travis-ci.org/producthunt/chai-enzyme.svg)](https://travis-ci.org/producthunt/chai-enzyme)\n\n[Chai.js](https://github.com/chaijs/chai) assertions for [enzyme](https://github.com/airbnb/enzyme/).\n\n## Table of Contents\n\n  1. [Installation](#installation)\n  1. [Setup](#setup)\n  1. [Debug output in assertion exceptions](#debug-output-in-assertion-exceptions)\n  1. [Assertions](#assertions)\n    1. [`checked()`](#checked)\n    1. [`className(str)`](#classnamestr)\n    1. [`contain(node)`](#containnode)\n    1. [`descendants(selector)`](#descendantsselector)\n      1. [`exactly()`](#exactly)\n    1. [`disabled()`](#disabled)\n    1. [`blank()`](#blank)\n    1. [`present()`](#present)\n    1. [`html(str)`](#htmlstr)\n    1. [`id(str)`](#idstr)\n    1. [`match(selector)`](#matchselector)\n    1. [`ref(key)`](#refkey)\n    1. [`selected()`](#selected)\n    1. [`tagName(str)`](#tagnamestr)\n    1. [`text(str)`](#textstr)\n    1. [`type(func)`](#typefunc)\n    1. [`value(str)`](#valuestr)\n    1. [`attr(key, [val])`](#attrkey-val)\n    1. [`data(key, [val])`](#datakey-val)\n    1. [`style(key, [val])`](#stylekey-val)\n    1. [`state(key, [val])`](#statekey-val)\n    1. [`prop(key, [val])`](#propkey-val)\n    1. [`props(key, [val])`](#propskey-val)\n  1. [Development](#development)\n  1. [Contributing](#contributing)\n  1. [License](#license)\n\n## Installation\n\n`chai-enzyme` depends on:\n\n```js\n\"peerDependencies\": {\n  \"chai\": \"3.x\",\n  \"cheerio\": \"0.19.x || 0.20.x || 0.22.x\",\n  \"enzyme\": \"1.x || 2.x\"\n}\n```\n\n`cheerio` is already a dependency of `enzyme`, so most probably you will not have\nto install it manually\n\n```\n$ npm install chai-enzyme --save-dev\n```\n\n## Setup\n\n```js\nimport chai from 'chai'\nimport chaiEnzyme from 'chai-enzyme'\n\nchai.use(chaiEnzyme()) // Note the invocation at the end\n```\n\n## Debug output in assertion exceptions\n\nYou can also provide a custom debug function that can print useful information\nabout the `wrapper` that you are using.\n\nThe default one that chai-enzyme comes with, will pretty print the HTML of the\nwrapper under test.\n\n```shell\n  1) #text (text) (shallow): passes when the actual matches the expected:\n     AssertionError: expected <Fixture /> to have text 'Test test', but it has 'Test'\n\n     ---------- this is where the debug output starts ----------\n\n     HTML:\n\n     <span id=\"child\">Test</span>\n\n     ---------- this is where the debug output ends ----------\n```\n\nHere is how you can implement and configure one for yourself:\n\n```js\nfunction myAwesomeDebug (wrapper) {\n  let html = wrapper.html()\n  // do something cool with the html\n  return html\n}\n\nchai.use(chaiEnzyme(myAwesomeDebug))\n```\n\n## Assertions\n\nIt's important to know that all assertions are registered with Chai's `overwrite*`\nmethods and therefore this plugin can work next to other Chai.js plugins that have\nsimilar assertions, such as [chai-jquery](https://github.com/chaijs/chai-jquery).\n\nAt the beginning of each assertion, we verify if the provided object is a\n`ShallowWrapper`, `ReactWrapper` or a `cheerio` object and if not we delegate\nto the next assertion that responds to the given method.\n\nNote that not all assertions work with every rendering strategy.\n\nIf you are wondering what rendering mechanism to use when, refer to [enzyme's\ndocumentation](https://github.com/airbnb/enzyme).\n\n#### `checked()`\n\n| render | mount | shallow |\n| -------|-------|-------- |\n| yes    | yes   | yes     |\n\n\nAssert that the given wrapper is checked:\n\n```js\nimport React from 'react'\nimport {mount, render, shallow} from 'enzyme'\n\nclass Fixture extends React.Component {\n  render () {\n    return (\n      <div>\n        <input id='checked' defaultChecked />\n        <input id='not' defaultChecked={false} />\n      </div>\n    )\n  }\n}\n\nconst wrapper = mount(<Fixture />) // mount/render/shallow when applicable\n\nexpect(wrapper.find('#checked')).to.be.checked()\nexpect(wrapper.find('#not')).to.not.be.checked()\n```\n\n#### `className(str)`\n\n| render | mount | shallow |\n| -------|-------|-------- |\n| yes    | yes   | yes     |\n\n\nAssert that the wrapper has a given class:\n\n```js\nimport React from 'react'\nimport {mount, render, shallow} from 'enzyme'\n\nclass Fixture extends React.Component {\n  render () {\n    return (\n      <div className='root top'>\n        <span className='child bottom'>test</span>\n      </div>\n    )\n  }\n}\n\nconst wrapper = mount(<Fixture />) // mount/render/shallow when applicable\n\nexpect(wrapper.find('span')).to.have.className('child')\nexpect(wrapper.find('span')).to.not.have.className('root')\n```\n\n#### `contain(node)`\n\n| render | mount | shallow |\n| -------|-------|-------- |\n| no     | yes   | yes     |\n\n\nAssert that the wrapper contains a given node:\n\n```js\nimport React from 'react'\nimport {mount, render, shallow} from 'enzyme'\n\nclass User extends React.Component {\n  render () {\n    return (\n      <span>User {this.props.index}</span>\n    )\n  }\n}\n\nUser.propTypes = {\n  index: React.PropTypes.number.isRequired\n}\n\nclass Fixture extends React.Component {\n  render () {\n    return (\n      <div>\n        <ul>\n          <li><User index={1} /></li>\n          <li><User index={2} /></li>\n        </ul>\n      </div>\n    )\n  }\n}\n\nconst wrapper = mount(<Fixture />) // mount/render/shallow when applicable\n\nexpect(wrapper).to.contain(<User index={1} />)\nexpect(wrapper).to.not.contain(<User index={3} />)\n```\n\n#### `descendants(selector)`\n\n| render | mount | shallow |\n| -------|-------|-------- |\n| yes    | yes   | yes     |\n\n\nAssert that the wrapper contains a descendant matching the given selector:\n\n```js\nimport React from 'react'\nimport {mount, render, shallow} from 'enzyme'\n\nclass User extends React.Component {\n  render () {\n    return (\n      <span>User</span>\n    )\n  }\n}\n\nclass Fixture extends React.Component {\n  render () {\n    return (\n      <div id='root'>\n        <User />\n      </div>\n    )\n  }\n}\n\nconst wrapper = mount(<Fixture />) // mount/render/shallow when applicable\n\nexpect(wrapper).to.have.descendants('#root')\nexpect(wrapper).to.have.descendants(User)\n\nexpect(wrapper).to.not.have.descendants('#root1')\n```\n\n#### `exactly()`\n\n| render | mount | shallow |\n| -------|-------|-------- |\n| yes    | yes   | yes     |\n\n\nAssert that the wrapper contains an exact amount of descendants matching the given selector:\n\n```js\nimport React from 'react'\nimport {mount, render, shallow} from 'enzyme'\n\nclass Fixture extends React.Component {\n  render () {\n    return (\n      <div id='root'>\n        <span id='child'>\n          <span class='item'></span>\n          <span class='item'></span>\n        </span>\n      </div>\n    )\n  }\n}\n\nconst wrapper = mount(<Fixture />) // mount/render/shallow when applicable\n\nexpect(wrapper).to.have.exactly(2).descendants('.item')\n```\n\n#### `disabled()`\n\n| render | mount | shallow |\n| -------|-------|-------- |\n| yes    | yes   | yes     |\n\n\nAssert that the given wrapper is disabled:\n\n```js\nimport React from 'react'\nimport {mount, render, shallow} from 'enzyme'\n\nclass Fixture extends React.Component {\n  render () {\n    return (\n      <div>\n        <input id='disabled' disabled />\n        <input id='not' />\n      </div>\n    )\n  }\n}\n\nconst wrapper = mount(<Fixture />) // mount/render/shallow when applicable\n\nexpect(wrapper.find('#disabled')).to.be.disabled()\nexpect(wrapper.find('#not')).to.not.be.disabled()\n```\n\n#### `blank()`\n\n| render | mount | shallow |\n| -------|-------|-------- |\n| yes    | yes   | yes     |\n\n\nAssert that the given wrapper is empty:\n\n```js\nimport React from 'react'\nimport {mount, render, shallow} from 'enzyme'\n\nclass Fixture extends React.Component {\n  render () {\n    return (\n      <div id='parent'>\n        <div id='child'>\n        </div>\n      </div>\n    )\n  }\n}\n\nconst wrapper = mount(<Fixture />) // mount/render/shallow when applicable\n\nexpect(wrapper.find('#child')).to.be.blank()\nexpect(wrapper.find('#parent')).to.not.be.blank()\n\nexpect(wrapper.find('#child')).to.be.empty // an alias\nexpect(wrapper.find('#parent')).to.not.be.empty // an alias\n\nclass NullFixture extends React.Component {\n  render () {\n    return null\n  }\n}\n\nconst nullWrapper = mount(<NullFixture />) // mount/render/shallow when applicable\n\nexpect(nullWrapper).to.be.blank()\nexpect(nullWrapper).to.be.empty // an alias\n```\n\n#### `present()`\n\n| render | mount | shallow |\n| -------|-------|-------- |\n| yes    | yes   | yes     |\n\n\nAssert that the given wrapper exists:\n\n```js\nimport React from 'react'\nimport {mount, render, shallow} from 'enzyme'\n\nclass Fixture extends React.Component {\n  render () {\n    return (\n      <div id='parent'></div>\n    )\n  }\n}\n\nconst wrapper = mount(<Fixture />) // mount/render/shallow when applicable\n\nexpect(wrapper.find('#parent')).be.present()\nexpect(wrapper.find('#parent')).to.exist // an alias\n\nclass NullFixture extends React.Component {\n  render () {\n    return null\n  }\n}\n\nconst nullWrapper = mount(<NullFixture />) // mount/render/shallow when applicable\n\nexpect(nullWrapper).to.be.present()\nexpect(nullWrapper).to.exist // an alias\n```\n\n#### `html(str)`\n\n| render | mount | shallow |\n| -------|-------|-------- |\n| yes    | yes   | yes     |\n\n\nAssert that the wrapper has given html:\n\n```js\nimport React from 'react'\nimport {mount, render, shallow} from 'enzyme'\n\nclass Fixture extends React.Component {\n  render () {\n    return (\n      <div id='root'>\n        <span id='child'>Test</span>\n      </div>\n    )\n  }\n}\n\nconst wrapper = mount(<Fixture />) // mount/render/shallow when applicable\n\nexpect(wrapper.find('#child')).to.have.html('<span id=\"child\">Test</span>')\n\nexpect(wrapper.find('#child')).to.not.have.html('<span id=\"child\">Test 1</span>')\n\nexpect(wrapper.find('#child')).to.have.html().match(/Test/)\n```\n\n#### `id(str)`\n\n| render | mount | shallow |\n| -------|-------|-------- |\n| yes    | yes   | yes     |\n\n\nAssert that the wrapper has given ID attribute:\n\n```js\nimport React from 'react'\nimport {mount, render, shallow} from 'enzyme'\n\nclass Fixture extends React.Component {\n  render () {\n    return (\n      <div id='root'>\n        <span id='child'>test</span>\n      </div>\n    )\n  }\n}\n\nconst wrapper = mount(<Fixture />) // mount/render/shallow when applicable\n\nexpect(wrapper).to.have.id('root')\nexpect(wrapper).to.not.have.id('child')\n```\n\n#### `match(selector)`\n\n| render | mount | shallow |\n| -------|-------|-------- |\n| yes    | yes   | yes     |\n\n\nAssert that the wrapper matches given selector:\n\n```js\nimport React from 'react'\nimport {mount, render, shallow} from 'enzyme'\n\nclass Fixture extends React.Component {\n  render () {\n    return (\n      <div id='root'>\n        <span id='child'>test</span>\n      </div>\n    )\n  }\n}\n\nconst wrapper = mount(<Fixture />) // mount/render/shallow when applicable\n\nexpect(wrapper.find('span')).to.match('#child')\nexpect(wrapper.find('#root')).to.not.match('#child')\n```\n\n#### `ref(key)`\n\n| render | mount | shallow |\n| -------|-------|-------- |\n| no     | yes   | no      |\n\n```js\nimport React from 'react'\nimport {mount, render, shallow} from 'enzyme'\n\nclass Fixture extends React.Component {\n  render () {\n    return (\n      <div>\n        <input ref='test' />\n      </div>\n    )\n  }\n}\n\nconst wrapper = mount(<Fixture />) // mount/render/shallow when applicable\n\nexpect(wrapper).to.have.ref('test')\nexpect(wrapper).to.have.ref('random')\n```\n\n#### `selected()`\n\n| render | mount | shallow |\n| -------|-------|-------- |\n| yes    | yes   | no      |\n\n\nAssert that the given wrapper is selected:\n\n```js\nimport React from 'react'\nimport {mount, render, shallow} from 'enzyme'\n\nclass Fixture extends React.Component {\n  render () {\n    return (\n      <select defaultValue='test1'>\n        <option id='test1' value='test1'>Test 1</option>\n        <option id='test2' value='test2'>Test 1</option>\n      </select>\n    )\n  }\n}\n\nconst wrapper = mount(<Fixture />) // mount/render/shallow when applicable\n\nexpect(wrapper.find('#test1')).to.be.selected()\nexpect(wrapper.find('#test2')).to.not.be.selected()\n```\n\n#### `tagName(str)`\n\n| render | mount | shallow |\n| -------|-------|-------- |\n| yes    | yes   | yes     |\n\n\nAssert that the given wrapper has the tag name:\n\n```js\nimport React from 'react'\nimport {mount, render, shallow} from 'enzyme'\n\nclass Fixture extends React.Component {\n  render () {\n    return (\n      <div>\n        <span />\n      </div>\n    )\n  }\n}\n\nconst wrapper = mount(<Fixture />) // mount/render/shallow when applicable\n\nexpect(wrapper).to.have.tagName('div')\nexpect(wrapper.find('span')).to.have.tagName('span')\n\nexpect(wrapper).to.not.have.tagName('a')\nexpect(wrapper.find('span')).to.not.have.tagName('a')\n```\n\n#### `text(str)`\n\n| render | mount | shallow |\n| -------|-------|-------- |\n| yes    | yes   | yes     |\n\n\nAssert that the given wrapper has the supplied text:\n\n```js\nimport React from 'react'\nimport {mount, render, shallow} from 'enzyme'\n\nclass Fixture extends React.Component {\n  render () {\n    return (\n      <div id='root'>\n        <span id='child'>Test</span>\n      </div>\n    )\n  }\n}\n\nconst wrapper = mount(<Fixture />) // mount/render/shallow when applicable\n\nexpect(wrapper.find('#child')).to.have.text('Test')\n\nexpect(wrapper.find('#child')).to.contain.text('Te')\nexpect(wrapper.find('#child')).to.include.text('Te') // include is an alias of contain\n\nexpect(wrapper.find('#child')).to.not.have.text('Other text')\nexpect(wrapper.find('#child')).to.not.include.text('Other text') // include is an alias of contain\n\nexpect(wrapper.find('#child')).to.have.text().match(/Test/)\n```\n\n#### `type(func)`\n\n| render | mount | shallow |\n| -------|-------|-------- |\n| no     | yes   | yes     |\n\n\nAssert that the given wrapper has a given type:\n\n```js\nimport React from 'react'\nimport {shallow} from 'enzyme'\n\nclass Foo extends React.Component {\n  render () {\n    return (\n      <div>Foo</div>\n    )\n  }\n}\n\nclass Bar extends React.Component {\n  render () {\n    return (\n      <div>Bar</div>\n    )\n  }\n}\n\nclass Fixture extends React.Component {\n  render () {\n    return (\n      <Foo />\n    )\n  }\n}\n\nconst shallowWrapper = shallow(<Fixture />)\nconst mountWrapper = mount(<Fixture />)\n\nexpect(shallowWrapper).to.have.type(Foo)\nexpect(shallowWrapper).to.not.have.type(Bar)\n\nexpect(mountWrapper).to.have.type(Fixture)\nexpect(mountWrapper).to.not.have.type(Bar)\n```\n\n#### `value(str)`\n\n| render | mount | shallow |\n| -------|-------|-------- |\n| yes    | yes   | yes     |\n\n\nAssert that the given wrapper has given value:\n\n```js\nimport React from 'react'\nimport {mount, render, shallow} from 'enzyme'\n\nclass Fixture extends React.Component {\n  render () {\n    return (\n      <div>\n        <input defaultValue='test' />\n      </div>\n    )\n  }\n}\n\nconst wrapper = mount(<Fixture />) // mount/render/shallow when applicable\n\nexpect(wrapper.find('input')).to.have.value('test')\nexpect(wrapper.find('input')).to.not.have.value('other')\n```\n\n#### `attr(key, [val])`\n\n| render | mount | shallow |\n| -------|-------|-------- |\n| yes    | yes   | yes     |\n\n\nAssert that the wrapper has given attribute [with value]:\n\n```js\nimport React from 'react'\nimport {mount, render, shallow} from 'enzyme'\n\nclass Fixture extends React.Component {\n  render () {\n    return (\n      <div id='root'>\n        <span id='child'>test</span>\n      </div>\n    )\n  }\n}\n\nconst wrapper = mount(<Fixture />) // mount/render/shallow when applicable\n\nexpect(wrapper.find('span')).to.have.attr('id')\nexpect(wrapper).to.not.have.attr('disabled')\n\nexpect(wrapper).to.have.attr('id', 'root')\nexpect(wrapper).to.not.have.attr('id', 'invalid')\n\nexpect(wrapper).to.have.attr('id').equal('root')\n```\n\n#### `data(key, [val])`\n\n| render | mount | shallow |\n| -------|-------|-------- |\n| yes    | yes   | yes     |\n\n\nAssert that the wrapper has a given data attribute [with value]:\n\n```js\nimport React from 'react'\nimport {mount, render, shallow} from 'enzyme'\n\nclass Fixture extends React.Component {\n  render () {\n    return (\n      <div data-name='root'>\n        <span data-name='child'>test</span>\n      </div>\n    )\n  }\n}\n\nconst wrapper = mount(<Fixture />) // mount/render/shallow when applicable\n\nexpect(wrapper).to.have.data('name')\nexpect(wrapper).to.not.have.data('random')\n\nexpect(wrapper).to.have.data('name', 'root')\nexpect(wrapper).to.not.have.data('name', 'invalid')\n\nexpect(wrapper).to.have.data('name').equal('root')\n```\n\n#### `style(key, [val])`\n\n| render | mount | shallow |\n| -------|-------|-------- |\n| yes    | yes   | yes     |\n\n\nAssert that the wrapper has given style:\n\n```js\nimport React from 'react'\nimport {mount, render, shallow} from 'enzyme'\n\nclass Fixture extends React.Component {\n  render () {\n    return (\n      <div style={{ border: 1 }}>\n        <span style={{ color: 'red' }}>test</span>\n      </div>\n    )\n  }\n}\n\nconst wrapper = mount(<Fixture />) // mount/render/shallow when applicable\n\nexpect(wrapper).to.have.style('border')\nexpect(wrapper).to.not.have.style('color')\n\nexpect(wrapper).to.have.style('border', '1px')\nexpect(wrapper).to.not.have.style('border', '2px')\n\nexpect(wrapper).to.have.style('border').equal('1px')\n```\n\n#### `state(key, [val])`\n\n| render | mount | shallow |\n| -------|-------|-------- |\n| no     | yes   | yes     |\n\n\nAssert that the wrapper has given state [with value]:\n\n```js\nimport React from 'react'\nimport {mount, render, shallow} from 'enzyme'\n\nclass Fixture extends React.Component {\n  constructor () {\n    super()\n    this.state = { foo: 'bar' }\n  }\n\n  render () {\n    return (\n      <div id='root'>\n      </div>\n    )\n  }\n}\n\nconst wrapper = mount(<Fixture />) // mount/render/shallow when applicable\n\nexpect(wrapper).to.have.state('foo')\nexpect(wrapper).to.not.have.state('bar')\n\n\nexpect(wrapper).to.have.state('foo', 'bar')\nexpect(wrapper).to.not.have.state('foo', 'baz')\n\nexpect(wrapper).to.have.state('foo').equal('bar')\n```\n\n\n#### `prop(key, [val])`\n\n| render | mount | shallow |\n| -------|-------|-------- |\n| no     | yes   | yes     |\n\nAssert that the wrapper has given prop [with value]:\n\n```js\nimport React from 'react'\nimport {mount, render, shallow} from 'enzyme'\n\nclass User extends React.Component {\n  render () {\n    return (\n      <span>User {this.props.index}</span>\n    )\n  }\n}\n\nUser.propTypes = {\n  index: React.PropTypes.number.isRequired\n}\n\nclass Fixture extends React.Component {\n  render () {\n    return (\n      <div>\n        <ul>\n          <li><User index={1} user={{name: 'Jane'}} /></li>\n          <li><User index={2} /></li>\n        </ul>\n      </div>\n    )\n  }\n}\n\nconst wrapper = mount(<Fixture />) // mount/render/shallow when applicable\n\nexpect(wrapper.find(User).first()).to.have.prop('index')\nexpect(wrapper.find(User).first()).to.not.have.prop('invalid')\n\n\nexpect(wrapper.find(User).first()).to.have.prop('index', 1)\nexpect(wrapper.find(User).first()).to.not.have.prop('index', 2)\n\nexpect(wrapper.find(User).first()).to.have.prop('index').equal(1)\nexpect(wrapper.find(User).first()).to.have.prop('user').deep.equal({name: 'Jane'})\n```\n\n#### `props(key, [val])`\n\n| render | mount | shallow |\n| -------|-------|-------- |\n| no     | yes   | yes     |\n\nAssert that the wrapper has given set of props [with values]:\n\n```js\nimport React from 'react'\nimport {mount, render, shallow} from 'enzyme'\n\nclass User extends React.Component {\n  render () {\n    return (\n      <span>User {this.props.index}</span>\n    )\n  }\n}\n\nUser.propTypes = {\n  index: React.PropTypes.number.isRequired\n}\n\nclass Fixture extends React.Component {\n  render () {\n    return (\n      <div>\n        <ul>\n          <li><User index={1} user={{name: 'Jane'}} /></li>\n          <li><User index={2} /></li>\n        </ul>\n      </div>\n    )\n  }\n}\n\nconst wrapper = mount(<Fixture />) // mount/render/shallow when applicable\n\nexpect(wrapper.find(User).first()).to.have.props([ 'index', 'user' ])\nexpect(wrapper.find(User).first()).to.not.have.props([ 'invalid' ])\n\n\nexpect(wrapper.find(User).first()).to.have.props({ index: 1 })\nexpect(wrapper.find(User).first()).to.not.have.props({ index: 2 })\n\nexpect(wrapper.find(User).first()).to.have.props([ 'index', 'user' ]).deep.equal([ 1, { name: 'Jane' } ])\n```\n\n## Development\n\n#### Setup\n\n```shell\n$ git clone <this repo>\n$ cd chai-enzyme\n$ npm install\n```\n\n#### Tests\n\nLinters:\n\n```shell\n$ npm run test:lint\n```\n\nTests:\n\n```shell\n$ npm run test:unit\n```\n\nAll:\n\n```shell\n$ npm test\n```\n\n## Contributing\n\nWe want to make this assertion library as robust and complete as possible. If\nyou think that there are missing features/assertions, please open a GitHub issue or even\nbetter - a PR.\n\nBug reports and pull requests are welcome on GitHub. This project is intended to be a\nsafe, welcoming space for collaboration, and contributors are expected to adhere\nto the [Contributor Covenant](http://contributor-covenant.org/) code of conduct.\n\n## License\n\n[![Product Hunt](http://i.imgur.com/dtAr7wC.png)](https://www.producthunt.com)\n\n```\n _________________\n< The MIT License >\n -----------------\n        \\   ^__^\n         \\  (oo)\\_______\n            (__)\\       )\\/\\\n                ||----w |\n                ||     ||\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/producthunt/chai-enzyme.git"
  },
  "scripts": {
    "build": "babel src --out-dir build",
    "clean": "rimraf build",
    "prepublish": "npm run clean && npm run build",
    "test": "npm run test:lint && npm run test:unit",
    "test:lint": "standard --verbose | snazzy",
    "test:unit": "NODE_ENV=test mocha test/**/*.test.js"
  },
  "standard": {
    "parser": "babel-eslint",
    "global": [
      "describe",
      "it",
      "before",
      "beforeEach",
      "after",
      "afterEach",
      "React",
      "expect",
      "createTest"
    ]
  },
  "version": "0.6.1"
}
